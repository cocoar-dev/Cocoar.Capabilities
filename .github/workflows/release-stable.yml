name: Release - Stable

on:
  release:
    types: [published]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.release.id }}
  cancel-in-progress: true

jobs:
  publish:
    if: github.event.release.target_commitish == 'main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: '1'
      DOTNET_CLI_TELEMETRY_OPTOUT: '1'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Build to generate GitVersion.MsBuild props
        run: |
          dotnet restore ./Cocoar.Capabilities.slnx
          dotnet build -c Release ./Cocoar.Capabilities.slnx > /dev/null
        working-directory: ./src

      - name: Verify tag matches version (from MSBuild)
        id: verify_tag
        run: |
          TAG="${{ github.event.release.tag_name }}"
          SEMVER=$(grep -oP '<GitVersion_SemVer>\K[^<]+' ./Cocoar.Capabilities/obj/Release/*/GitVersion.MsBuild.props | head -n1 || true)
          echo "Release tag: $TAG"
          echo "MSBuild GitVersion: ${SEMVER:-unknown}"
          if [ -z "$SEMVER" ]; then echo "::error ::Could not determine version from MSBuild props"; exit 1; fi
          if [ "v$SEMVER" != "$TAG" ]; then
            echo "::error ::Tag ($TAG) does not match MSBuild GitVersion ($SEMVER)"; exit 1;
          fi
          echo "semver=$SEMVER" >> $GITHUB_OUTPUT
        working-directory: ./src

      - name: Restore dependencies
        run: dotnet restore ./Cocoar.Capabilities.slnx
        working-directory: ./src

      - name: Build solution
        run: dotnet build ./Cocoar.Capabilities.slnx -c Release --no-restore
        working-directory: ./src

      - name: Run tests
        run: dotnet test ./Cocoar.Capabilities.slnx -c Release --no-build --no-restore --verbosity normal
        working-directory: ./src

      - name: Pack NuGet packages (incl. symbols)
        run: >
          dotnet pack ./Cocoar.Capabilities/Cocoar.Capabilities.csproj -c Release --no-restore
          /p:IncludeSymbols=true /p:SymbolPackageFormat=snupkg
          /p:Version=${{ steps.verify_tag.outputs.semver }}
          -o ../artifacts
        working-directory: ./src

      - name: Ensure packages exist
        run: |
          shopt -s nullglob
          files=(artifacts/*.nupkg artifacts/*.snupkg)
          (( ${#files[@]} )) || { echo "::error ::No packages found in artifacts/"; exit 1; }

      - name: Upload artifacts (audit)
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ steps.verify_tag.outputs.semver }}
          path: artifacts
          retention-days: 7

      - name: Push to NuGet.org
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          shopt -s nullglob
          for p in artifacts/*.nupkg artifacts/*.snupkg; do
            dotnet nuget push "$p" --source https://api.nuget.org/v3/index.json --api-key "$NUGET_API_KEY" --skip-duplicate
          done